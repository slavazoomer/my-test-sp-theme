<script>
  const setupStickyCartBehavior = () => {
      if (window.innerWidth <= 749) {
      const stickyCart = document.querySelector('.product-sticky-cart');
  
      const addStyles = () => {
          stickyCart.style.opacity = '1';
          stickyCart.style.pointerEvents = 'visible';
          stickyCart.style.transform = 'translateY(0)';
      };
  
      const removeStyles = () => {
          stickyCart.style.opacity = '';
          stickyCart.style.pointerEvents = '';
          stickyCart.style.transform = '';
      };
  
      if (stickyCart) addStyles();
  
      const observer = new IntersectionObserver(entries => {
          entries.forEach(entry => {
              if (entry.isIntersecting) {
                  removeStyles();
              } else {
                  addStyles();
              }
          });
      }, { threshold: [0.1] });
  
      const target = document.querySelector('.product-form .product-form__buttons');
      if (target) observer.observe(target);
      }
  }; 
  </script>
  
  <!-- GrowthBook SDK script -->
  <script src="https://cdn.jsdelivr.net/npm/@growthbook/growthbook/dist/bundles/index.js"></script>
  <script src="https://www.googletagmanager.com/gtag/js?id=G-GK12S155H7"></script>
  <script>

    function getCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for(var i=0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') c = c.substring(1, c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
      }
      return "";
    }
    document.addEventListener('DOMContentLoaded', () => {
      let trackingConsentCookie = ''
      let trackingConsentCookieCMP = ''
      try{
        trackingConsentCookie = JSON.parse(decodeURIComponent(getCookie('_tracking_consent')))
        trackingConsentCookieCMP = trackingConsentCookie.con.CMP
        console.log('cookie cmp', trackingConsentCookieCMP)
      } catch{
        console.log('error checking consent cookies')
      }
      // Function to check if consent has been given
      const consentGiven = () => {
        return localStorage.getItem('userConsent') === 'true';
      };
    
      // Function to execute scripts requiring consent
      const executeScriptsRequiringConsent = () => {
        const { GrowthBook } = window.growthbook;
      
        window.dataLayer = window.dataLayer || [];
        function gtag() {
          dataLayer.push(arguments);
        }
        gtag('js', new Date());
        gtag('config', 'G-GK12S155H7');
      
        // Function to get GA Client ID
        const getClientId = () => {
          return new Promise((resolve) => {
            gtag('get', 'G-GK12S155H7', 'client_id', (clientId) => {
              resolve(clientId);
            });
          });
        };
      
        // Function to get the device type
        const getDeviceType = () => {
          const userAgent = window.navigator.userAgent;
          if (/Mobi|Android/i.test(userAgent)) {
            return 'mobile';
          } else if (/Tablet|iPad/i.test(userAgent)) {
            return 'tablet';
          } else {
            return 'desktop';
          }
        };
      
        getClientId().then((clientId) => {
          console.log('client id', clientId)
          const deviceType = getDeviceType();
          window.gb = new GrowthBook({
            apiHost: 'https://cdn.growthbook.io',
            clientKey: 'sdk-RNbrHdm0R1h7QkI',
            enableDevMode: true,
            attributes: {
              id: clientId,
              clientId: clientId,
              deviceType: deviceType, // Assign the detected device type
            },
            trackingCallback: (experiment, result) => {
              // Send event details to GA4
              console.log('GrowthBook callback triggered');
              window.gtag('event', 'experiment_viewed', {
                event_category: 'experiment',
                experiment_id: experiment.key,
                variation_id: result.key,
                gb_user_id: clientId,
              });
            },
          });
          gb.loadFeatures({ autoRefresh: true });
          setTimeout(() => {
            gb.evalFeature('run-test');
          }, 2000);
        });
      };
    
      // Check for existing consent
      if (consentGiven()) {
        executeScriptsRequiringConsent();
      } else {
        // Listen for the consent button click if consent not already given
        const acceptCookiesBtn = document.querySelector('.cc-btn.cc-btn-decision.cc-allow');
        if (acceptCookiesBtn) {
          acceptCookiesBtn.addEventListener('click', () => {
            // Set consent
            localStorage.setItem('userConsent', 'true');
            // Then execute the scripts
            executeScriptsRequiringConsent();
          });
          //set consent if there is no value of 0, cookie conset declined
          if(trackingConsentCookie !== ''){
            if (Object.values(trackingConsentCookieCMP).includes('1')){
              localStorage.setItem('userConsent', 'true');
              executeScriptsRequiringConsent();
            }
          }
        }
      }

      if(trackingConsentCookie !== ''){
        if (Object.values(trackingConsentCookieCMP).includes('1')){
          localStorage.setItem('userConsent', 'true');
          executeScriptsRequiringConsent();
        }
      }
    });    

    
  </script>